----------------------登入
用户验证


---------------------form表单
<!-- 
      label-position="left"文字对齐
      label-width="80px" 文字的宽度
-->
再input中 type=number规定输入类型
<el-form ref="form" size="mini" :rules="loginFormRules" label-position="left" label-width="80px" :model="formLabelAlign">
  <el-form-item label="用户名称" prop="username">
    <el-input prefix-icon="el-icon-s-custom" placeholder="请输入用户名称" v-model="formLabelAlign.username"></el-input>
  </el-form-item>
  <el-form-item label="密码" prop="password">
    <el-input
      prefix-icon="el-icon-key"
      placeholder="请输入密码"
      type="password"
      v-model="formLabelAlign.password"
    ></el-input>
  </el-form-item>
  <div class="log-btn">
    <el-button @click="submitForm" type="primary">登入</el-button>
    <el-button type="info" @click="resetForm">重置</el-button>
  </div>
</el-form>
-----------------------------------自定义校验邮箱

---------------------------格式化文件
在项目根目录中创建.prettierrc
{
  // 移除分号
  "semi":false,
  // 使用单引号
  "singleQuote":ture
}


--------------------------------导航菜单
 :unique-opened="true"是否全部打开
中的index是path


-------------------------table
<!-- table用户列表区域 -->
<el-table border stripe :data="userList" style="width: 100%">
  <el-table-column type="index"></el-table-column>
  <el-table-column prop="username" label="姓名" width="180"> </el-table-column>
  <el-table-column prop="email" label="邮箱" width="180"> </el-table-column>
  <el-table-column prop="mobile" label="电话"> </el-table-column>
  <el-table-column prop="role_name" label="角色"> </el-table-column>
  <!-- 如果指定了作用域插槽prop就没有用了 -->
  <el-table-column label="状态">
    <template slot-scope="scope">
      <el-switch v-model="scope.row.mg_state"></el-switch>
    </template>
  </el-table-column>
  <el-table-column label="操作"> </el-table-column>
</el-table>



----------------------element-user插件按需导入
import Vue from "vue";
import {Dialog,Message} from "element-ui";
import "element-ui/lib/theme-chalk/index.css";

Vue.use(Dialog);
Vue.prototype.$message = Message



--------------------vscode 选这快捷键
ctrl+d 向下选择匹配项



------------------$nextTick(()=>{})

当界面上的元素被重新渲染之后，才会指定回调函数中的代码

获取焦点

this.$refs.[name].input.focus();



---------------------------el-tabs el-tab-pane
<el-tabs v-model="stepsActiveIndex" tab-position="left" style="">
        <!-- 这里中间不能放其他的标签 -->
  <el-tab-pane label="基本信息" name="0">

el-tabs中有一个
钩子函数
和router的befor差不多
返回 false就不跳转


----------------------------------------------el-upload
<!-- action图片要上传的地址 -->
            <!-- on-preview 处理图片预览 -->
            <!-- on-remove 处理移除图片 -->
            <!-- list-type="picture"预览组件的ui效果显示方式 -->
            <!-- headers手动绑定请求头 -->
            <!-- :on-success="upSuccess"上传成功时执行
             on-success	文件上传成功时的钩子	function(response, file, fileList)
             response:响应数据
             file：文件信息
            fileList：文件列表-->
            <el-upload
              class="upload-demo"
              action="https://jsonplaceholder.typicode.com/posts/"
              :on-preview="handlePreview"
              :on-remove="handleRemove"
              list-type="picture-card"
              :on-success="upSuccess"
>







----------------------加载条

npm install --save nprogress

import NProgress from "nprogress";
import "nprogress/nprogress.css";

NProgress.start();
NProgress.done();




------------------------------在build中取消console打印命令
安装插件

npm install babel-plugin-transform-remove-console --save-dev

在.babelrc中声明
{
  "plugin":["transfrom-remove-console"]
}


或者在babel.config.js中声明(这种声明会在开发阶段页生效)
plugins: ["transform-remove-console"],

要进行一下判断
const proPlugins = [];
// 发布阶段需要的插件
if (process.env.NODE_ENV === "production") {
  proPlugins.push("transform-remove-console");
}

plugins: [
    // 发布产品时用的插件
    ...proPlugins,
],











































